<?php namespace Exception;

checkNum(300);

function checkNum($number)
{
    if($number>1)
    {
        throw new Exception("Value must be 1 or below");
    }
    return true;
}

class HttpException extends \Exception
{
    public $httpCode = 500;

    public function __construct($httpCode = 500, $message = "", $code = 0, \Exception $previous = null)
    {
        if (!is_numeric($httpCode)) {
            $httpCode = 500;
        }
        parent::__construct($message, $code, $previous); // TODO: Change the autogenerated stub
        $this->httpCode = $httpCode;
//        set_status($httpCode);
        @header("HTTP/1.1 $code");
    }

    public function getHttpCode()
    {
        return $this->httpCode;
    }

}


function set_status($code)
{
    switch ($code) {
        case 200:
            @header("HTTP/1.1 $code OK");
            break;
        case 201:
            @header("HTTP/1.1 $code Created");
            break;
        case 202:
            @header("HTTP/1.1 $code Accepted");
            break;
        case 204:
            @header("HTTP/1.1 $code No Content");
            break;
        case 400:
            @header("HTTP/1.1 $code Bad Request");
            break;
        case 401:
            @header("HTTP/1.1 $code Unauthorized");
            break;
        case 403:
            @header("HTTP/1.1 $code Forbidden");
            break;
        case 404:
            @header("HTTP/1.1 $code Not Found");
            break;
        case 406:
            @header("HTTP/1.1 $code Not Acceptable");
            break;
        case 410:
            @header("HTTP/1.1 $code Gone");
            break;
        case 422:
            @header("HTTP/1.1 $code Unprocessable Entity");
            break;
        case 500:
            @header("HTTP/1.1 $code Internal Server Error");
            break;
        default:
            @header("HTTP/1.1 $code");
    }
}
